import split

#TODO ADD STRING PRINT CAPABILITY
#ADD FUNCTIONS
#ADD LIST PRINT CAPABILITY
Write "Welcome to rC Interpreter, rC:1.9.5$line_break$Shortcuts:$line_break$; -> indent break$line_break$$line_break$"
str line >>""
list(str) "known_nums"
list(str) "known_str"
list(str) "known_strLists"
list(str) "known_numLists"
str quote >>""
str(quote+")")
while str:line==line:
	Write "-> "
	str line >>$readline
	str line_first_space >>""
	str final_line >>line
	getSplit from:line; to:line_first_space; index:0; separator:" ";
	if str:line_first_space=="for":
		str(final_line+->)
		while str:line!=";":
			Write "    "
			str line >>$readline
			str(final_line+line)
			str(final_line+;;)
	if str:line_first_space=="if":
		str(final_line+->)
		while str:line!=";":
			Write "    "
			str line >>$readline
			str(final_line+line)
			str(final_line+;;)
	if str:line_first_space=="while":
		str(final_line+->)
		while str:line!=";":
			Write "    "
			str line >>$readline
			str(final_line+line)
			str(final_line+;;)
	if str:line_first_space=="num":
		str name >>""
		getSplit from:line; to:name; index:0; separator:" >>";
		getSplit from:name; to:name; index:1; separator:" ";
		num ind >>0
		known_nums.IndexOf:name; to:ind;
		if num:ind==-1:
			str known_nums.Add >>name
	for __name_num in range:known_nums.length:
		lsval(known_nums[__name_num])
		if str:known_nums[__name_num]==line:
			WriteNum {$known_nums[__name_num]$}


	if str:line_first_space=="str":
		str name >>""
		getSplit from:line; to:name; index:0; separator:" >>";
		getSplit from:name; to:name; index:1; separator:" ";
		num ind >>0
		known_str.IndexOf:name; to:ind;
		if num:ind==-1:
			str known_str.Add >>name
	for __name_num_ in range:known_str.length:
		lsval(known_str[__name_num_])
		if str:known_str[__name_num_]==line:
			WriteStr {quote}
			WriteStr {$known_str[__name_num_]$}
			WriteStr {quote}
	if str:line_first_space=="list(str)":
		str name >>""
		getSplit from:line; to:name; index:1; separator:quote;
		num ind >>0
		known_strLists.IndexOf:name; to:ind;
		if num:ind==-1:
			list(str) "known_strLists" >>["$name$"]
	for __index__list_str in range:known_strLists.length:
		lsval(known_strLists[__index__list_str])

		if str:line==known_strLists[__index__list_str]:
			num cur_len >>$known_strLists[__index__list_str]$.length
			Write "["
			for __k in range:cur_len:
				str __curr >>"$known_strLists[__index__list_str]$"
				lsval($__curr$[__k])
				WriteStr {quote}
				WriteStr {$__curr$[__k]}
				WriteStr {quote}	
				num cur___ >>cur_len
				--cur___
				if num:__k<cur___:
					Write ","
			Write "]"


	if str:line_first_space=="list(num)":
		str name >>""
		getSplit from:line; to:name; index:1; separator:quote;
		num ind >>0
		known_numLists.IndexOf:name; to:ind;
		if num:ind==-1:
			list(str) "known_numLists" >>["$name$"]
	for __index__list_str in range:known_numLists.length:
		lsval(known_numLists[__index__list_str])

		if str:line==known_numLists[__index__list_str]:
			num cur_len >>$known_numLists[__index__list_str]$.length
			Write "["
			for __k in range:cur_len:
				str __curr >>"$known_numLists[__index__list_str]$"
				lnval($__curr$[__k])
				WriteNum {$__curr$[__k]}
				num cur___ >>cur_len
				--cur___
				if num:__k<cur___:
					Write ","
			Write "]"
	if str:line_first_space=="function":
		str(final_line+->)
		while str:line!=";":
			Write "    "
			str line >>$readline
			str(final_line+line)
			str(final_line+;;)
	$final_line$
	newln
